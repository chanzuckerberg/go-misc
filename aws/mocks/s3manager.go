// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-sdk-go/service/s3/s3manager/s3manageriface (interfaces: DownloaderAPI)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	s3 "github.com/aws/aws-sdk-go/service/s3"
	s3manager "github.com/aws/aws-sdk-go/service/s3/s3manager"
	gomock "github.com/golang/mock/gomock"
	io "io"
	reflect "reflect"
)

// MockDownloaderAPI is a mock of DownloaderAPI interface
type MockDownloaderAPI struct {
	ctrl     *gomock.Controller
	recorder *MockDownloaderAPIMockRecorder
}

// MockDownloaderAPIMockRecorder is the mock recorder for MockDownloaderAPI
type MockDownloaderAPIMockRecorder struct {
	mock *MockDownloaderAPI
}

// NewMockDownloaderAPI creates a new mock instance
func NewMockDownloaderAPI(ctrl *gomock.Controller) *MockDownloaderAPI {
	mock := &MockDownloaderAPI{ctrl: ctrl}
	mock.recorder = &MockDownloaderAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDownloaderAPI) EXPECT() *MockDownloaderAPIMockRecorder {
	return m.recorder
}

// Download mocks base method
func (m *MockDownloaderAPI) Download(arg0 io.WriterAt, arg1 *s3.GetObjectInput, arg2 ...func(*s3manager.Downloader)) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Download", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Download indicates an expected call of Download
func (mr *MockDownloaderAPIMockRecorder) Download(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Download", reflect.TypeOf((*MockDownloaderAPI)(nil).Download), varargs...)
}

// DownloadWithContext mocks base method
func (m *MockDownloaderAPI) DownloadWithContext(arg0 context.Context, arg1 io.WriterAt, arg2 *s3.GetObjectInput, arg3 ...func(*s3manager.Downloader)) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DownloadWithContext", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadWithContext indicates an expected call of DownloadWithContext
func (mr *MockDownloaderAPIMockRecorder) DownloadWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadWithContext", reflect.TypeOf((*MockDownloaderAPI)(nil).DownloadWithContext), varargs...)
}

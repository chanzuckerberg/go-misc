// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"
import request "github.com/aws/aws-sdk-go/aws/request"
import support "github.com/aws/aws-sdk-go/service/support"

// SupportAPI is an autogenerated mock type for the SupportAPI type
type SupportAPI struct {
	mock.Mock
}

// AddAttachmentsToSet provides a mock function with given fields: _a0
func (_m *SupportAPI) AddAttachmentsToSet(_a0 *support.AddAttachmentsToSetInput) (*support.AddAttachmentsToSetOutput, error) {
	ret := _m.Called(_a0)

	var r0 *support.AddAttachmentsToSetOutput
	if rf, ok := ret.Get(0).(func(*support.AddAttachmentsToSetInput) *support.AddAttachmentsToSetOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*support.AddAttachmentsToSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*support.AddAttachmentsToSetInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddAttachmentsToSetRequest provides a mock function with given fields: _a0
func (_m *SupportAPI) AddAttachmentsToSetRequest(_a0 *support.AddAttachmentsToSetInput) (*request.Request, *support.AddAttachmentsToSetOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*support.AddAttachmentsToSetInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *support.AddAttachmentsToSetOutput
	if rf, ok := ret.Get(1).(func(*support.AddAttachmentsToSetInput) *support.AddAttachmentsToSetOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*support.AddAttachmentsToSetOutput)
		}
	}

	return r0, r1
}

// AddAttachmentsToSetWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SupportAPI) AddAttachmentsToSetWithContext(_a0 context.Context, _a1 *support.AddAttachmentsToSetInput, _a2 ...request.Option) (*support.AddAttachmentsToSetOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *support.AddAttachmentsToSetOutput
	if rf, ok := ret.Get(0).(func(context.Context, *support.AddAttachmentsToSetInput, ...request.Option) *support.AddAttachmentsToSetOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*support.AddAttachmentsToSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *support.AddAttachmentsToSetInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddCommunicationToCase provides a mock function with given fields: _a0
func (_m *SupportAPI) AddCommunicationToCase(_a0 *support.AddCommunicationToCaseInput) (*support.AddCommunicationToCaseOutput, error) {
	ret := _m.Called(_a0)

	var r0 *support.AddCommunicationToCaseOutput
	if rf, ok := ret.Get(0).(func(*support.AddCommunicationToCaseInput) *support.AddCommunicationToCaseOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*support.AddCommunicationToCaseOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*support.AddCommunicationToCaseInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddCommunicationToCaseRequest provides a mock function with given fields: _a0
func (_m *SupportAPI) AddCommunicationToCaseRequest(_a0 *support.AddCommunicationToCaseInput) (*request.Request, *support.AddCommunicationToCaseOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*support.AddCommunicationToCaseInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *support.AddCommunicationToCaseOutput
	if rf, ok := ret.Get(1).(func(*support.AddCommunicationToCaseInput) *support.AddCommunicationToCaseOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*support.AddCommunicationToCaseOutput)
		}
	}

	return r0, r1
}

// AddCommunicationToCaseWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SupportAPI) AddCommunicationToCaseWithContext(_a0 context.Context, _a1 *support.AddCommunicationToCaseInput, _a2 ...request.Option) (*support.AddCommunicationToCaseOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *support.AddCommunicationToCaseOutput
	if rf, ok := ret.Get(0).(func(context.Context, *support.AddCommunicationToCaseInput, ...request.Option) *support.AddCommunicationToCaseOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*support.AddCommunicationToCaseOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *support.AddCommunicationToCaseInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCase provides a mock function with given fields: _a0
func (_m *SupportAPI) CreateCase(_a0 *support.CreateCaseInput) (*support.CreateCaseOutput, error) {
	ret := _m.Called(_a0)

	var r0 *support.CreateCaseOutput
	if rf, ok := ret.Get(0).(func(*support.CreateCaseInput) *support.CreateCaseOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*support.CreateCaseOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*support.CreateCaseInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCaseRequest provides a mock function with given fields: _a0
func (_m *SupportAPI) CreateCaseRequest(_a0 *support.CreateCaseInput) (*request.Request, *support.CreateCaseOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*support.CreateCaseInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *support.CreateCaseOutput
	if rf, ok := ret.Get(1).(func(*support.CreateCaseInput) *support.CreateCaseOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*support.CreateCaseOutput)
		}
	}

	return r0, r1
}

// CreateCaseWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SupportAPI) CreateCaseWithContext(_a0 context.Context, _a1 *support.CreateCaseInput, _a2 ...request.Option) (*support.CreateCaseOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *support.CreateCaseOutput
	if rf, ok := ret.Get(0).(func(context.Context, *support.CreateCaseInput, ...request.Option) *support.CreateCaseOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*support.CreateCaseOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *support.CreateCaseInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAttachment provides a mock function with given fields: _a0
func (_m *SupportAPI) DescribeAttachment(_a0 *support.DescribeAttachmentInput) (*support.DescribeAttachmentOutput, error) {
	ret := _m.Called(_a0)

	var r0 *support.DescribeAttachmentOutput
	if rf, ok := ret.Get(0).(func(*support.DescribeAttachmentInput) *support.DescribeAttachmentOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*support.DescribeAttachmentOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*support.DescribeAttachmentInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAttachmentRequest provides a mock function with given fields: _a0
func (_m *SupportAPI) DescribeAttachmentRequest(_a0 *support.DescribeAttachmentInput) (*request.Request, *support.DescribeAttachmentOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*support.DescribeAttachmentInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *support.DescribeAttachmentOutput
	if rf, ok := ret.Get(1).(func(*support.DescribeAttachmentInput) *support.DescribeAttachmentOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*support.DescribeAttachmentOutput)
		}
	}

	return r0, r1
}

// DescribeAttachmentWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SupportAPI) DescribeAttachmentWithContext(_a0 context.Context, _a1 *support.DescribeAttachmentInput, _a2 ...request.Option) (*support.DescribeAttachmentOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *support.DescribeAttachmentOutput
	if rf, ok := ret.Get(0).(func(context.Context, *support.DescribeAttachmentInput, ...request.Option) *support.DescribeAttachmentOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*support.DescribeAttachmentOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *support.DescribeAttachmentInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeCases provides a mock function with given fields: _a0
func (_m *SupportAPI) DescribeCases(_a0 *support.DescribeCasesInput) (*support.DescribeCasesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *support.DescribeCasesOutput
	if rf, ok := ret.Get(0).(func(*support.DescribeCasesInput) *support.DescribeCasesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*support.DescribeCasesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*support.DescribeCasesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeCasesPages provides a mock function with given fields: _a0, _a1
func (_m *SupportAPI) DescribeCasesPages(_a0 *support.DescribeCasesInput, _a1 func(*support.DescribeCasesOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*support.DescribeCasesInput, func(*support.DescribeCasesOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeCasesPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *SupportAPI) DescribeCasesPagesWithContext(_a0 context.Context, _a1 *support.DescribeCasesInput, _a2 func(*support.DescribeCasesOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *support.DescribeCasesInput, func(*support.DescribeCasesOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeCasesRequest provides a mock function with given fields: _a0
func (_m *SupportAPI) DescribeCasesRequest(_a0 *support.DescribeCasesInput) (*request.Request, *support.DescribeCasesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*support.DescribeCasesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *support.DescribeCasesOutput
	if rf, ok := ret.Get(1).(func(*support.DescribeCasesInput) *support.DescribeCasesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*support.DescribeCasesOutput)
		}
	}

	return r0, r1
}

// DescribeCasesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SupportAPI) DescribeCasesWithContext(_a0 context.Context, _a1 *support.DescribeCasesInput, _a2 ...request.Option) (*support.DescribeCasesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *support.DescribeCasesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *support.DescribeCasesInput, ...request.Option) *support.DescribeCasesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*support.DescribeCasesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *support.DescribeCasesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeCommunications provides a mock function with given fields: _a0
func (_m *SupportAPI) DescribeCommunications(_a0 *support.DescribeCommunicationsInput) (*support.DescribeCommunicationsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *support.DescribeCommunicationsOutput
	if rf, ok := ret.Get(0).(func(*support.DescribeCommunicationsInput) *support.DescribeCommunicationsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*support.DescribeCommunicationsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*support.DescribeCommunicationsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeCommunicationsPages provides a mock function with given fields: _a0, _a1
func (_m *SupportAPI) DescribeCommunicationsPages(_a0 *support.DescribeCommunicationsInput, _a1 func(*support.DescribeCommunicationsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*support.DescribeCommunicationsInput, func(*support.DescribeCommunicationsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeCommunicationsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *SupportAPI) DescribeCommunicationsPagesWithContext(_a0 context.Context, _a1 *support.DescribeCommunicationsInput, _a2 func(*support.DescribeCommunicationsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *support.DescribeCommunicationsInput, func(*support.DescribeCommunicationsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeCommunicationsRequest provides a mock function with given fields: _a0
func (_m *SupportAPI) DescribeCommunicationsRequest(_a0 *support.DescribeCommunicationsInput) (*request.Request, *support.DescribeCommunicationsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*support.DescribeCommunicationsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *support.DescribeCommunicationsOutput
	if rf, ok := ret.Get(1).(func(*support.DescribeCommunicationsInput) *support.DescribeCommunicationsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*support.DescribeCommunicationsOutput)
		}
	}

	return r0, r1
}

// DescribeCommunicationsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SupportAPI) DescribeCommunicationsWithContext(_a0 context.Context, _a1 *support.DescribeCommunicationsInput, _a2 ...request.Option) (*support.DescribeCommunicationsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *support.DescribeCommunicationsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *support.DescribeCommunicationsInput, ...request.Option) *support.DescribeCommunicationsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*support.DescribeCommunicationsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *support.DescribeCommunicationsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeServices provides a mock function with given fields: _a0
func (_m *SupportAPI) DescribeServices(_a0 *support.DescribeServicesInput) (*support.DescribeServicesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *support.DescribeServicesOutput
	if rf, ok := ret.Get(0).(func(*support.DescribeServicesInput) *support.DescribeServicesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*support.DescribeServicesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*support.DescribeServicesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeServicesRequest provides a mock function with given fields: _a0
func (_m *SupportAPI) DescribeServicesRequest(_a0 *support.DescribeServicesInput) (*request.Request, *support.DescribeServicesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*support.DescribeServicesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *support.DescribeServicesOutput
	if rf, ok := ret.Get(1).(func(*support.DescribeServicesInput) *support.DescribeServicesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*support.DescribeServicesOutput)
		}
	}

	return r0, r1
}

// DescribeServicesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SupportAPI) DescribeServicesWithContext(_a0 context.Context, _a1 *support.DescribeServicesInput, _a2 ...request.Option) (*support.DescribeServicesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *support.DescribeServicesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *support.DescribeServicesInput, ...request.Option) *support.DescribeServicesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*support.DescribeServicesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *support.DescribeServicesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeSeverityLevels provides a mock function with given fields: _a0
func (_m *SupportAPI) DescribeSeverityLevels(_a0 *support.DescribeSeverityLevelsInput) (*support.DescribeSeverityLevelsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *support.DescribeSeverityLevelsOutput
	if rf, ok := ret.Get(0).(func(*support.DescribeSeverityLevelsInput) *support.DescribeSeverityLevelsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*support.DescribeSeverityLevelsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*support.DescribeSeverityLevelsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeSeverityLevelsRequest provides a mock function with given fields: _a0
func (_m *SupportAPI) DescribeSeverityLevelsRequest(_a0 *support.DescribeSeverityLevelsInput) (*request.Request, *support.DescribeSeverityLevelsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*support.DescribeSeverityLevelsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *support.DescribeSeverityLevelsOutput
	if rf, ok := ret.Get(1).(func(*support.DescribeSeverityLevelsInput) *support.DescribeSeverityLevelsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*support.DescribeSeverityLevelsOutput)
		}
	}

	return r0, r1
}

// DescribeSeverityLevelsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SupportAPI) DescribeSeverityLevelsWithContext(_a0 context.Context, _a1 *support.DescribeSeverityLevelsInput, _a2 ...request.Option) (*support.DescribeSeverityLevelsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *support.DescribeSeverityLevelsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *support.DescribeSeverityLevelsInput, ...request.Option) *support.DescribeSeverityLevelsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*support.DescribeSeverityLevelsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *support.DescribeSeverityLevelsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTrustedAdvisorCheckRefreshStatuses provides a mock function with given fields: _a0
func (_m *SupportAPI) DescribeTrustedAdvisorCheckRefreshStatuses(_a0 *support.DescribeTrustedAdvisorCheckRefreshStatusesInput) (*support.DescribeTrustedAdvisorCheckRefreshStatusesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *support.DescribeTrustedAdvisorCheckRefreshStatusesOutput
	if rf, ok := ret.Get(0).(func(*support.DescribeTrustedAdvisorCheckRefreshStatusesInput) *support.DescribeTrustedAdvisorCheckRefreshStatusesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*support.DescribeTrustedAdvisorCheckRefreshStatusesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*support.DescribeTrustedAdvisorCheckRefreshStatusesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTrustedAdvisorCheckRefreshStatusesRequest provides a mock function with given fields: _a0
func (_m *SupportAPI) DescribeTrustedAdvisorCheckRefreshStatusesRequest(_a0 *support.DescribeTrustedAdvisorCheckRefreshStatusesInput) (*request.Request, *support.DescribeTrustedAdvisorCheckRefreshStatusesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*support.DescribeTrustedAdvisorCheckRefreshStatusesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *support.DescribeTrustedAdvisorCheckRefreshStatusesOutput
	if rf, ok := ret.Get(1).(func(*support.DescribeTrustedAdvisorCheckRefreshStatusesInput) *support.DescribeTrustedAdvisorCheckRefreshStatusesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*support.DescribeTrustedAdvisorCheckRefreshStatusesOutput)
		}
	}

	return r0, r1
}

// DescribeTrustedAdvisorCheckRefreshStatusesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SupportAPI) DescribeTrustedAdvisorCheckRefreshStatusesWithContext(_a0 context.Context, _a1 *support.DescribeTrustedAdvisorCheckRefreshStatusesInput, _a2 ...request.Option) (*support.DescribeTrustedAdvisorCheckRefreshStatusesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *support.DescribeTrustedAdvisorCheckRefreshStatusesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *support.DescribeTrustedAdvisorCheckRefreshStatusesInput, ...request.Option) *support.DescribeTrustedAdvisorCheckRefreshStatusesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*support.DescribeTrustedAdvisorCheckRefreshStatusesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *support.DescribeTrustedAdvisorCheckRefreshStatusesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTrustedAdvisorCheckResult provides a mock function with given fields: _a0
func (_m *SupportAPI) DescribeTrustedAdvisorCheckResult(_a0 *support.DescribeTrustedAdvisorCheckResultInput) (*support.DescribeTrustedAdvisorCheckResultOutput, error) {
	ret := _m.Called(_a0)

	var r0 *support.DescribeTrustedAdvisorCheckResultOutput
	if rf, ok := ret.Get(0).(func(*support.DescribeTrustedAdvisorCheckResultInput) *support.DescribeTrustedAdvisorCheckResultOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*support.DescribeTrustedAdvisorCheckResultOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*support.DescribeTrustedAdvisorCheckResultInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTrustedAdvisorCheckResultRequest provides a mock function with given fields: _a0
func (_m *SupportAPI) DescribeTrustedAdvisorCheckResultRequest(_a0 *support.DescribeTrustedAdvisorCheckResultInput) (*request.Request, *support.DescribeTrustedAdvisorCheckResultOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*support.DescribeTrustedAdvisorCheckResultInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *support.DescribeTrustedAdvisorCheckResultOutput
	if rf, ok := ret.Get(1).(func(*support.DescribeTrustedAdvisorCheckResultInput) *support.DescribeTrustedAdvisorCheckResultOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*support.DescribeTrustedAdvisorCheckResultOutput)
		}
	}

	return r0, r1
}

// DescribeTrustedAdvisorCheckResultWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SupportAPI) DescribeTrustedAdvisorCheckResultWithContext(_a0 context.Context, _a1 *support.DescribeTrustedAdvisorCheckResultInput, _a2 ...request.Option) (*support.DescribeTrustedAdvisorCheckResultOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *support.DescribeTrustedAdvisorCheckResultOutput
	if rf, ok := ret.Get(0).(func(context.Context, *support.DescribeTrustedAdvisorCheckResultInput, ...request.Option) *support.DescribeTrustedAdvisorCheckResultOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*support.DescribeTrustedAdvisorCheckResultOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *support.DescribeTrustedAdvisorCheckResultInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTrustedAdvisorCheckSummaries provides a mock function with given fields: _a0
func (_m *SupportAPI) DescribeTrustedAdvisorCheckSummaries(_a0 *support.DescribeTrustedAdvisorCheckSummariesInput) (*support.DescribeTrustedAdvisorCheckSummariesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *support.DescribeTrustedAdvisorCheckSummariesOutput
	if rf, ok := ret.Get(0).(func(*support.DescribeTrustedAdvisorCheckSummariesInput) *support.DescribeTrustedAdvisorCheckSummariesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*support.DescribeTrustedAdvisorCheckSummariesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*support.DescribeTrustedAdvisorCheckSummariesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTrustedAdvisorCheckSummariesRequest provides a mock function with given fields: _a0
func (_m *SupportAPI) DescribeTrustedAdvisorCheckSummariesRequest(_a0 *support.DescribeTrustedAdvisorCheckSummariesInput) (*request.Request, *support.DescribeTrustedAdvisorCheckSummariesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*support.DescribeTrustedAdvisorCheckSummariesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *support.DescribeTrustedAdvisorCheckSummariesOutput
	if rf, ok := ret.Get(1).(func(*support.DescribeTrustedAdvisorCheckSummariesInput) *support.DescribeTrustedAdvisorCheckSummariesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*support.DescribeTrustedAdvisorCheckSummariesOutput)
		}
	}

	return r0, r1
}

// DescribeTrustedAdvisorCheckSummariesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SupportAPI) DescribeTrustedAdvisorCheckSummariesWithContext(_a0 context.Context, _a1 *support.DescribeTrustedAdvisorCheckSummariesInput, _a2 ...request.Option) (*support.DescribeTrustedAdvisorCheckSummariesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *support.DescribeTrustedAdvisorCheckSummariesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *support.DescribeTrustedAdvisorCheckSummariesInput, ...request.Option) *support.DescribeTrustedAdvisorCheckSummariesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*support.DescribeTrustedAdvisorCheckSummariesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *support.DescribeTrustedAdvisorCheckSummariesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTrustedAdvisorChecks provides a mock function with given fields: _a0
func (_m *SupportAPI) DescribeTrustedAdvisorChecks(_a0 *support.DescribeTrustedAdvisorChecksInput) (*support.DescribeTrustedAdvisorChecksOutput, error) {
	ret := _m.Called(_a0)

	var r0 *support.DescribeTrustedAdvisorChecksOutput
	if rf, ok := ret.Get(0).(func(*support.DescribeTrustedAdvisorChecksInput) *support.DescribeTrustedAdvisorChecksOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*support.DescribeTrustedAdvisorChecksOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*support.DescribeTrustedAdvisorChecksInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTrustedAdvisorChecksRequest provides a mock function with given fields: _a0
func (_m *SupportAPI) DescribeTrustedAdvisorChecksRequest(_a0 *support.DescribeTrustedAdvisorChecksInput) (*request.Request, *support.DescribeTrustedAdvisorChecksOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*support.DescribeTrustedAdvisorChecksInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *support.DescribeTrustedAdvisorChecksOutput
	if rf, ok := ret.Get(1).(func(*support.DescribeTrustedAdvisorChecksInput) *support.DescribeTrustedAdvisorChecksOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*support.DescribeTrustedAdvisorChecksOutput)
		}
	}

	return r0, r1
}

// DescribeTrustedAdvisorChecksWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SupportAPI) DescribeTrustedAdvisorChecksWithContext(_a0 context.Context, _a1 *support.DescribeTrustedAdvisorChecksInput, _a2 ...request.Option) (*support.DescribeTrustedAdvisorChecksOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *support.DescribeTrustedAdvisorChecksOutput
	if rf, ok := ret.Get(0).(func(context.Context, *support.DescribeTrustedAdvisorChecksInput, ...request.Option) *support.DescribeTrustedAdvisorChecksOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*support.DescribeTrustedAdvisorChecksOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *support.DescribeTrustedAdvisorChecksInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RefreshTrustedAdvisorCheck provides a mock function with given fields: _a0
func (_m *SupportAPI) RefreshTrustedAdvisorCheck(_a0 *support.RefreshTrustedAdvisorCheckInput) (*support.RefreshTrustedAdvisorCheckOutput, error) {
	ret := _m.Called(_a0)

	var r0 *support.RefreshTrustedAdvisorCheckOutput
	if rf, ok := ret.Get(0).(func(*support.RefreshTrustedAdvisorCheckInput) *support.RefreshTrustedAdvisorCheckOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*support.RefreshTrustedAdvisorCheckOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*support.RefreshTrustedAdvisorCheckInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RefreshTrustedAdvisorCheckRequest provides a mock function with given fields: _a0
func (_m *SupportAPI) RefreshTrustedAdvisorCheckRequest(_a0 *support.RefreshTrustedAdvisorCheckInput) (*request.Request, *support.RefreshTrustedAdvisorCheckOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*support.RefreshTrustedAdvisorCheckInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *support.RefreshTrustedAdvisorCheckOutput
	if rf, ok := ret.Get(1).(func(*support.RefreshTrustedAdvisorCheckInput) *support.RefreshTrustedAdvisorCheckOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*support.RefreshTrustedAdvisorCheckOutput)
		}
	}

	return r0, r1
}

// RefreshTrustedAdvisorCheckWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SupportAPI) RefreshTrustedAdvisorCheckWithContext(_a0 context.Context, _a1 *support.RefreshTrustedAdvisorCheckInput, _a2 ...request.Option) (*support.RefreshTrustedAdvisorCheckOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *support.RefreshTrustedAdvisorCheckOutput
	if rf, ok := ret.Get(0).(func(context.Context, *support.RefreshTrustedAdvisorCheckInput, ...request.Option) *support.RefreshTrustedAdvisorCheckOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*support.RefreshTrustedAdvisorCheckOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *support.RefreshTrustedAdvisorCheckInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResolveCase provides a mock function with given fields: _a0
func (_m *SupportAPI) ResolveCase(_a0 *support.ResolveCaseInput) (*support.ResolveCaseOutput, error) {
	ret := _m.Called(_a0)

	var r0 *support.ResolveCaseOutput
	if rf, ok := ret.Get(0).(func(*support.ResolveCaseInput) *support.ResolveCaseOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*support.ResolveCaseOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*support.ResolveCaseInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResolveCaseRequest provides a mock function with given fields: _a0
func (_m *SupportAPI) ResolveCaseRequest(_a0 *support.ResolveCaseInput) (*request.Request, *support.ResolveCaseOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*support.ResolveCaseInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *support.ResolveCaseOutput
	if rf, ok := ret.Get(1).(func(*support.ResolveCaseInput) *support.ResolveCaseOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*support.ResolveCaseOutput)
		}
	}

	return r0, r1
}

// ResolveCaseWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SupportAPI) ResolveCaseWithContext(_a0 context.Context, _a1 *support.ResolveCaseInput, _a2 ...request.Option) (*support.ResolveCaseOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *support.ResolveCaseOutput
	if rf, ok := ret.Get(0).(func(context.Context, *support.ResolveCaseInput, ...request.Option) *support.ResolveCaseOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*support.ResolveCaseOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *support.ResolveCaseInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

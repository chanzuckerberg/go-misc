// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import firehose "github.com/aws/aws-sdk-go/service/firehose"

import mock "github.com/stretchr/testify/mock"
import request "github.com/aws/aws-sdk-go/aws/request"

// FirehoseAPI is an autogenerated mock type for the FirehoseAPI type
type FirehoseAPI struct {
	mock.Mock
}

// CreateDeliveryStream provides a mock function with given fields: _a0
func (_m *FirehoseAPI) CreateDeliveryStream(_a0 *firehose.CreateDeliveryStreamInput) (*firehose.CreateDeliveryStreamOutput, error) {
	ret := _m.Called(_a0)

	var r0 *firehose.CreateDeliveryStreamOutput
	if rf, ok := ret.Get(0).(func(*firehose.CreateDeliveryStreamInput) *firehose.CreateDeliveryStreamOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firehose.CreateDeliveryStreamOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*firehose.CreateDeliveryStreamInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDeliveryStreamRequest provides a mock function with given fields: _a0
func (_m *FirehoseAPI) CreateDeliveryStreamRequest(_a0 *firehose.CreateDeliveryStreamInput) (*request.Request, *firehose.CreateDeliveryStreamOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*firehose.CreateDeliveryStreamInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *firehose.CreateDeliveryStreamOutput
	if rf, ok := ret.Get(1).(func(*firehose.CreateDeliveryStreamInput) *firehose.CreateDeliveryStreamOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*firehose.CreateDeliveryStreamOutput)
		}
	}

	return r0, r1
}

// CreateDeliveryStreamWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *FirehoseAPI) CreateDeliveryStreamWithContext(_a0 context.Context, _a1 *firehose.CreateDeliveryStreamInput, _a2 ...request.Option) (*firehose.CreateDeliveryStreamOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *firehose.CreateDeliveryStreamOutput
	if rf, ok := ret.Get(0).(func(context.Context, *firehose.CreateDeliveryStreamInput, ...request.Option) *firehose.CreateDeliveryStreamOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firehose.CreateDeliveryStreamOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *firehose.CreateDeliveryStreamInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDeliveryStream provides a mock function with given fields: _a0
func (_m *FirehoseAPI) DeleteDeliveryStream(_a0 *firehose.DeleteDeliveryStreamInput) (*firehose.DeleteDeliveryStreamOutput, error) {
	ret := _m.Called(_a0)

	var r0 *firehose.DeleteDeliveryStreamOutput
	if rf, ok := ret.Get(0).(func(*firehose.DeleteDeliveryStreamInput) *firehose.DeleteDeliveryStreamOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firehose.DeleteDeliveryStreamOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*firehose.DeleteDeliveryStreamInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDeliveryStreamRequest provides a mock function with given fields: _a0
func (_m *FirehoseAPI) DeleteDeliveryStreamRequest(_a0 *firehose.DeleteDeliveryStreamInput) (*request.Request, *firehose.DeleteDeliveryStreamOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*firehose.DeleteDeliveryStreamInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *firehose.DeleteDeliveryStreamOutput
	if rf, ok := ret.Get(1).(func(*firehose.DeleteDeliveryStreamInput) *firehose.DeleteDeliveryStreamOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*firehose.DeleteDeliveryStreamOutput)
		}
	}

	return r0, r1
}

// DeleteDeliveryStreamWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *FirehoseAPI) DeleteDeliveryStreamWithContext(_a0 context.Context, _a1 *firehose.DeleteDeliveryStreamInput, _a2 ...request.Option) (*firehose.DeleteDeliveryStreamOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *firehose.DeleteDeliveryStreamOutput
	if rf, ok := ret.Get(0).(func(context.Context, *firehose.DeleteDeliveryStreamInput, ...request.Option) *firehose.DeleteDeliveryStreamOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firehose.DeleteDeliveryStreamOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *firehose.DeleteDeliveryStreamInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDeliveryStream provides a mock function with given fields: _a0
func (_m *FirehoseAPI) DescribeDeliveryStream(_a0 *firehose.DescribeDeliveryStreamInput) (*firehose.DescribeDeliveryStreamOutput, error) {
	ret := _m.Called(_a0)

	var r0 *firehose.DescribeDeliveryStreamOutput
	if rf, ok := ret.Get(0).(func(*firehose.DescribeDeliveryStreamInput) *firehose.DescribeDeliveryStreamOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firehose.DescribeDeliveryStreamOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*firehose.DescribeDeliveryStreamInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDeliveryStreamRequest provides a mock function with given fields: _a0
func (_m *FirehoseAPI) DescribeDeliveryStreamRequest(_a0 *firehose.DescribeDeliveryStreamInput) (*request.Request, *firehose.DescribeDeliveryStreamOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*firehose.DescribeDeliveryStreamInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *firehose.DescribeDeliveryStreamOutput
	if rf, ok := ret.Get(1).(func(*firehose.DescribeDeliveryStreamInput) *firehose.DescribeDeliveryStreamOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*firehose.DescribeDeliveryStreamOutput)
		}
	}

	return r0, r1
}

// DescribeDeliveryStreamWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *FirehoseAPI) DescribeDeliveryStreamWithContext(_a0 context.Context, _a1 *firehose.DescribeDeliveryStreamInput, _a2 ...request.Option) (*firehose.DescribeDeliveryStreamOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *firehose.DescribeDeliveryStreamOutput
	if rf, ok := ret.Get(0).(func(context.Context, *firehose.DescribeDeliveryStreamInput, ...request.Option) *firehose.DescribeDeliveryStreamOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firehose.DescribeDeliveryStreamOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *firehose.DescribeDeliveryStreamInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDeliveryStreams provides a mock function with given fields: _a0
func (_m *FirehoseAPI) ListDeliveryStreams(_a0 *firehose.ListDeliveryStreamsInput) (*firehose.ListDeliveryStreamsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *firehose.ListDeliveryStreamsOutput
	if rf, ok := ret.Get(0).(func(*firehose.ListDeliveryStreamsInput) *firehose.ListDeliveryStreamsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firehose.ListDeliveryStreamsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*firehose.ListDeliveryStreamsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDeliveryStreamsRequest provides a mock function with given fields: _a0
func (_m *FirehoseAPI) ListDeliveryStreamsRequest(_a0 *firehose.ListDeliveryStreamsInput) (*request.Request, *firehose.ListDeliveryStreamsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*firehose.ListDeliveryStreamsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *firehose.ListDeliveryStreamsOutput
	if rf, ok := ret.Get(1).(func(*firehose.ListDeliveryStreamsInput) *firehose.ListDeliveryStreamsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*firehose.ListDeliveryStreamsOutput)
		}
	}

	return r0, r1
}

// ListDeliveryStreamsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *FirehoseAPI) ListDeliveryStreamsWithContext(_a0 context.Context, _a1 *firehose.ListDeliveryStreamsInput, _a2 ...request.Option) (*firehose.ListDeliveryStreamsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *firehose.ListDeliveryStreamsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *firehose.ListDeliveryStreamsInput, ...request.Option) *firehose.ListDeliveryStreamsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firehose.ListDeliveryStreamsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *firehose.ListDeliveryStreamsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForDeliveryStream provides a mock function with given fields: _a0
func (_m *FirehoseAPI) ListTagsForDeliveryStream(_a0 *firehose.ListTagsForDeliveryStreamInput) (*firehose.ListTagsForDeliveryStreamOutput, error) {
	ret := _m.Called(_a0)

	var r0 *firehose.ListTagsForDeliveryStreamOutput
	if rf, ok := ret.Get(0).(func(*firehose.ListTagsForDeliveryStreamInput) *firehose.ListTagsForDeliveryStreamOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firehose.ListTagsForDeliveryStreamOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*firehose.ListTagsForDeliveryStreamInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForDeliveryStreamRequest provides a mock function with given fields: _a0
func (_m *FirehoseAPI) ListTagsForDeliveryStreamRequest(_a0 *firehose.ListTagsForDeliveryStreamInput) (*request.Request, *firehose.ListTagsForDeliveryStreamOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*firehose.ListTagsForDeliveryStreamInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *firehose.ListTagsForDeliveryStreamOutput
	if rf, ok := ret.Get(1).(func(*firehose.ListTagsForDeliveryStreamInput) *firehose.ListTagsForDeliveryStreamOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*firehose.ListTagsForDeliveryStreamOutput)
		}
	}

	return r0, r1
}

// ListTagsForDeliveryStreamWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *FirehoseAPI) ListTagsForDeliveryStreamWithContext(_a0 context.Context, _a1 *firehose.ListTagsForDeliveryStreamInput, _a2 ...request.Option) (*firehose.ListTagsForDeliveryStreamOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *firehose.ListTagsForDeliveryStreamOutput
	if rf, ok := ret.Get(0).(func(context.Context, *firehose.ListTagsForDeliveryStreamInput, ...request.Option) *firehose.ListTagsForDeliveryStreamOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firehose.ListTagsForDeliveryStreamOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *firehose.ListTagsForDeliveryStreamInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutRecord provides a mock function with given fields: _a0
func (_m *FirehoseAPI) PutRecord(_a0 *firehose.PutRecordInput) (*firehose.PutRecordOutput, error) {
	ret := _m.Called(_a0)

	var r0 *firehose.PutRecordOutput
	if rf, ok := ret.Get(0).(func(*firehose.PutRecordInput) *firehose.PutRecordOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firehose.PutRecordOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*firehose.PutRecordInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutRecordBatch provides a mock function with given fields: _a0
func (_m *FirehoseAPI) PutRecordBatch(_a0 *firehose.PutRecordBatchInput) (*firehose.PutRecordBatchOutput, error) {
	ret := _m.Called(_a0)

	var r0 *firehose.PutRecordBatchOutput
	if rf, ok := ret.Get(0).(func(*firehose.PutRecordBatchInput) *firehose.PutRecordBatchOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firehose.PutRecordBatchOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*firehose.PutRecordBatchInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutRecordBatchRequest provides a mock function with given fields: _a0
func (_m *FirehoseAPI) PutRecordBatchRequest(_a0 *firehose.PutRecordBatchInput) (*request.Request, *firehose.PutRecordBatchOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*firehose.PutRecordBatchInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *firehose.PutRecordBatchOutput
	if rf, ok := ret.Get(1).(func(*firehose.PutRecordBatchInput) *firehose.PutRecordBatchOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*firehose.PutRecordBatchOutput)
		}
	}

	return r0, r1
}

// PutRecordBatchWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *FirehoseAPI) PutRecordBatchWithContext(_a0 context.Context, _a1 *firehose.PutRecordBatchInput, _a2 ...request.Option) (*firehose.PutRecordBatchOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *firehose.PutRecordBatchOutput
	if rf, ok := ret.Get(0).(func(context.Context, *firehose.PutRecordBatchInput, ...request.Option) *firehose.PutRecordBatchOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firehose.PutRecordBatchOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *firehose.PutRecordBatchInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutRecordRequest provides a mock function with given fields: _a0
func (_m *FirehoseAPI) PutRecordRequest(_a0 *firehose.PutRecordInput) (*request.Request, *firehose.PutRecordOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*firehose.PutRecordInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *firehose.PutRecordOutput
	if rf, ok := ret.Get(1).(func(*firehose.PutRecordInput) *firehose.PutRecordOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*firehose.PutRecordOutput)
		}
	}

	return r0, r1
}

// PutRecordWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *FirehoseAPI) PutRecordWithContext(_a0 context.Context, _a1 *firehose.PutRecordInput, _a2 ...request.Option) (*firehose.PutRecordOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *firehose.PutRecordOutput
	if rf, ok := ret.Get(0).(func(context.Context, *firehose.PutRecordInput, ...request.Option) *firehose.PutRecordOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firehose.PutRecordOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *firehose.PutRecordInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartDeliveryStreamEncryption provides a mock function with given fields: _a0
func (_m *FirehoseAPI) StartDeliveryStreamEncryption(_a0 *firehose.StartDeliveryStreamEncryptionInput) (*firehose.StartDeliveryStreamEncryptionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *firehose.StartDeliveryStreamEncryptionOutput
	if rf, ok := ret.Get(0).(func(*firehose.StartDeliveryStreamEncryptionInput) *firehose.StartDeliveryStreamEncryptionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firehose.StartDeliveryStreamEncryptionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*firehose.StartDeliveryStreamEncryptionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartDeliveryStreamEncryptionRequest provides a mock function with given fields: _a0
func (_m *FirehoseAPI) StartDeliveryStreamEncryptionRequest(_a0 *firehose.StartDeliveryStreamEncryptionInput) (*request.Request, *firehose.StartDeliveryStreamEncryptionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*firehose.StartDeliveryStreamEncryptionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *firehose.StartDeliveryStreamEncryptionOutput
	if rf, ok := ret.Get(1).(func(*firehose.StartDeliveryStreamEncryptionInput) *firehose.StartDeliveryStreamEncryptionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*firehose.StartDeliveryStreamEncryptionOutput)
		}
	}

	return r0, r1
}

// StartDeliveryStreamEncryptionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *FirehoseAPI) StartDeliveryStreamEncryptionWithContext(_a0 context.Context, _a1 *firehose.StartDeliveryStreamEncryptionInput, _a2 ...request.Option) (*firehose.StartDeliveryStreamEncryptionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *firehose.StartDeliveryStreamEncryptionOutput
	if rf, ok := ret.Get(0).(func(context.Context, *firehose.StartDeliveryStreamEncryptionInput, ...request.Option) *firehose.StartDeliveryStreamEncryptionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firehose.StartDeliveryStreamEncryptionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *firehose.StartDeliveryStreamEncryptionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopDeliveryStreamEncryption provides a mock function with given fields: _a0
func (_m *FirehoseAPI) StopDeliveryStreamEncryption(_a0 *firehose.StopDeliveryStreamEncryptionInput) (*firehose.StopDeliveryStreamEncryptionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *firehose.StopDeliveryStreamEncryptionOutput
	if rf, ok := ret.Get(0).(func(*firehose.StopDeliveryStreamEncryptionInput) *firehose.StopDeliveryStreamEncryptionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firehose.StopDeliveryStreamEncryptionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*firehose.StopDeliveryStreamEncryptionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopDeliveryStreamEncryptionRequest provides a mock function with given fields: _a0
func (_m *FirehoseAPI) StopDeliveryStreamEncryptionRequest(_a0 *firehose.StopDeliveryStreamEncryptionInput) (*request.Request, *firehose.StopDeliveryStreamEncryptionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*firehose.StopDeliveryStreamEncryptionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *firehose.StopDeliveryStreamEncryptionOutput
	if rf, ok := ret.Get(1).(func(*firehose.StopDeliveryStreamEncryptionInput) *firehose.StopDeliveryStreamEncryptionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*firehose.StopDeliveryStreamEncryptionOutput)
		}
	}

	return r0, r1
}

// StopDeliveryStreamEncryptionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *FirehoseAPI) StopDeliveryStreamEncryptionWithContext(_a0 context.Context, _a1 *firehose.StopDeliveryStreamEncryptionInput, _a2 ...request.Option) (*firehose.StopDeliveryStreamEncryptionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *firehose.StopDeliveryStreamEncryptionOutput
	if rf, ok := ret.Get(0).(func(context.Context, *firehose.StopDeliveryStreamEncryptionInput, ...request.Option) *firehose.StopDeliveryStreamEncryptionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firehose.StopDeliveryStreamEncryptionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *firehose.StopDeliveryStreamEncryptionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagDeliveryStream provides a mock function with given fields: _a0
func (_m *FirehoseAPI) TagDeliveryStream(_a0 *firehose.TagDeliveryStreamInput) (*firehose.TagDeliveryStreamOutput, error) {
	ret := _m.Called(_a0)

	var r0 *firehose.TagDeliveryStreamOutput
	if rf, ok := ret.Get(0).(func(*firehose.TagDeliveryStreamInput) *firehose.TagDeliveryStreamOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firehose.TagDeliveryStreamOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*firehose.TagDeliveryStreamInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagDeliveryStreamRequest provides a mock function with given fields: _a0
func (_m *FirehoseAPI) TagDeliveryStreamRequest(_a0 *firehose.TagDeliveryStreamInput) (*request.Request, *firehose.TagDeliveryStreamOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*firehose.TagDeliveryStreamInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *firehose.TagDeliveryStreamOutput
	if rf, ok := ret.Get(1).(func(*firehose.TagDeliveryStreamInput) *firehose.TagDeliveryStreamOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*firehose.TagDeliveryStreamOutput)
		}
	}

	return r0, r1
}

// TagDeliveryStreamWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *FirehoseAPI) TagDeliveryStreamWithContext(_a0 context.Context, _a1 *firehose.TagDeliveryStreamInput, _a2 ...request.Option) (*firehose.TagDeliveryStreamOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *firehose.TagDeliveryStreamOutput
	if rf, ok := ret.Get(0).(func(context.Context, *firehose.TagDeliveryStreamInput, ...request.Option) *firehose.TagDeliveryStreamOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firehose.TagDeliveryStreamOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *firehose.TagDeliveryStreamInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagDeliveryStream provides a mock function with given fields: _a0
func (_m *FirehoseAPI) UntagDeliveryStream(_a0 *firehose.UntagDeliveryStreamInput) (*firehose.UntagDeliveryStreamOutput, error) {
	ret := _m.Called(_a0)

	var r0 *firehose.UntagDeliveryStreamOutput
	if rf, ok := ret.Get(0).(func(*firehose.UntagDeliveryStreamInput) *firehose.UntagDeliveryStreamOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firehose.UntagDeliveryStreamOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*firehose.UntagDeliveryStreamInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagDeliveryStreamRequest provides a mock function with given fields: _a0
func (_m *FirehoseAPI) UntagDeliveryStreamRequest(_a0 *firehose.UntagDeliveryStreamInput) (*request.Request, *firehose.UntagDeliveryStreamOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*firehose.UntagDeliveryStreamInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *firehose.UntagDeliveryStreamOutput
	if rf, ok := ret.Get(1).(func(*firehose.UntagDeliveryStreamInput) *firehose.UntagDeliveryStreamOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*firehose.UntagDeliveryStreamOutput)
		}
	}

	return r0, r1
}

// UntagDeliveryStreamWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *FirehoseAPI) UntagDeliveryStreamWithContext(_a0 context.Context, _a1 *firehose.UntagDeliveryStreamInput, _a2 ...request.Option) (*firehose.UntagDeliveryStreamOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *firehose.UntagDeliveryStreamOutput
	if rf, ok := ret.Get(0).(func(context.Context, *firehose.UntagDeliveryStreamInput, ...request.Option) *firehose.UntagDeliveryStreamOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firehose.UntagDeliveryStreamOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *firehose.UntagDeliveryStreamInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDestination provides a mock function with given fields: _a0
func (_m *FirehoseAPI) UpdateDestination(_a0 *firehose.UpdateDestinationInput) (*firehose.UpdateDestinationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *firehose.UpdateDestinationOutput
	if rf, ok := ret.Get(0).(func(*firehose.UpdateDestinationInput) *firehose.UpdateDestinationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firehose.UpdateDestinationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*firehose.UpdateDestinationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDestinationRequest provides a mock function with given fields: _a0
func (_m *FirehoseAPI) UpdateDestinationRequest(_a0 *firehose.UpdateDestinationInput) (*request.Request, *firehose.UpdateDestinationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*firehose.UpdateDestinationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *firehose.UpdateDestinationOutput
	if rf, ok := ret.Get(1).(func(*firehose.UpdateDestinationInput) *firehose.UpdateDestinationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*firehose.UpdateDestinationOutput)
		}
	}

	return r0, r1
}

// UpdateDestinationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *FirehoseAPI) UpdateDestinationWithContext(_a0 context.Context, _a1 *firehose.UpdateDestinationInput, _a2 ...request.Option) (*firehose.UpdateDestinationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *firehose.UpdateDestinationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *firehose.UpdateDestinationInput, ...request.Option) *firehose.UpdateDestinationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firehose.UpdateDestinationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *firehose.UpdateDestinationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

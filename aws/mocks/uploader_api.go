// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"
import s3manager "github.com/aws/aws-sdk-go/service/s3/s3manager"

// UploaderAPI is an autogenerated mock type for the UploaderAPI type
type UploaderAPI struct {
	mock.Mock
}

// Upload provides a mock function with given fields: _a0, _a1
func (_m *UploaderAPI) Upload(_a0 *s3manager.UploadInput, _a1 ...func(*s3manager.Uploader)) (*s3manager.UploadOutput, error) {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *s3manager.UploadOutput
	if rf, ok := ret.Get(0).(func(*s3manager.UploadInput, ...func(*s3manager.Uploader)) *s3manager.UploadOutput); ok {
		r0 = rf(_a0, _a1...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3manager.UploadOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*s3manager.UploadInput, ...func(*s3manager.Uploader)) error); ok {
		r1 = rf(_a0, _a1...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *UploaderAPI) UploadWithContext(_a0 context.Context, _a1 *s3manager.UploadInput, _a2 ...func(*s3manager.Uploader)) (*s3manager.UploadOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *s3manager.UploadOutput
	if rf, ok := ret.Get(0).(func(context.Context, *s3manager.UploadInput, ...func(*s3manager.Uploader)) *s3manager.UploadOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3manager.UploadOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *s3manager.UploadInput, ...func(*s3manager.Uploader)) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

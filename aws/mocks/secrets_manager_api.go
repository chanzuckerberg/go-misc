// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"
import request "github.com/aws/aws-sdk-go/aws/request"
import secretsmanager "github.com/aws/aws-sdk-go/service/secretsmanager"

// SecretsManagerAPI is an autogenerated mock type for the SecretsManagerAPI type
type SecretsManagerAPI struct {
	mock.Mock
}

// CancelRotateSecret provides a mock function with given fields: _a0
func (_m *SecretsManagerAPI) CancelRotateSecret(_a0 *secretsmanager.CancelRotateSecretInput) (*secretsmanager.CancelRotateSecretOutput, error) {
	ret := _m.Called(_a0)

	var r0 *secretsmanager.CancelRotateSecretOutput
	if rf, ok := ret.Get(0).(func(*secretsmanager.CancelRotateSecretInput) *secretsmanager.CancelRotateSecretOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secretsmanager.CancelRotateSecretOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*secretsmanager.CancelRotateSecretInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelRotateSecretRequest provides a mock function with given fields: _a0
func (_m *SecretsManagerAPI) CancelRotateSecretRequest(_a0 *secretsmanager.CancelRotateSecretInput) (*request.Request, *secretsmanager.CancelRotateSecretOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*secretsmanager.CancelRotateSecretInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *secretsmanager.CancelRotateSecretOutput
	if rf, ok := ret.Get(1).(func(*secretsmanager.CancelRotateSecretInput) *secretsmanager.CancelRotateSecretOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*secretsmanager.CancelRotateSecretOutput)
		}
	}

	return r0, r1
}

// CancelRotateSecretWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SecretsManagerAPI) CancelRotateSecretWithContext(_a0 context.Context, _a1 *secretsmanager.CancelRotateSecretInput, _a2 ...request.Option) (*secretsmanager.CancelRotateSecretOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *secretsmanager.CancelRotateSecretOutput
	if rf, ok := ret.Get(0).(func(context.Context, *secretsmanager.CancelRotateSecretInput, ...request.Option) *secretsmanager.CancelRotateSecretOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secretsmanager.CancelRotateSecretOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *secretsmanager.CancelRotateSecretInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSecret provides a mock function with given fields: _a0
func (_m *SecretsManagerAPI) CreateSecret(_a0 *secretsmanager.CreateSecretInput) (*secretsmanager.CreateSecretOutput, error) {
	ret := _m.Called(_a0)

	var r0 *secretsmanager.CreateSecretOutput
	if rf, ok := ret.Get(0).(func(*secretsmanager.CreateSecretInput) *secretsmanager.CreateSecretOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secretsmanager.CreateSecretOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*secretsmanager.CreateSecretInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSecretRequest provides a mock function with given fields: _a0
func (_m *SecretsManagerAPI) CreateSecretRequest(_a0 *secretsmanager.CreateSecretInput) (*request.Request, *secretsmanager.CreateSecretOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*secretsmanager.CreateSecretInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *secretsmanager.CreateSecretOutput
	if rf, ok := ret.Get(1).(func(*secretsmanager.CreateSecretInput) *secretsmanager.CreateSecretOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*secretsmanager.CreateSecretOutput)
		}
	}

	return r0, r1
}

// CreateSecretWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SecretsManagerAPI) CreateSecretWithContext(_a0 context.Context, _a1 *secretsmanager.CreateSecretInput, _a2 ...request.Option) (*secretsmanager.CreateSecretOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *secretsmanager.CreateSecretOutput
	if rf, ok := ret.Get(0).(func(context.Context, *secretsmanager.CreateSecretInput, ...request.Option) *secretsmanager.CreateSecretOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secretsmanager.CreateSecretOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *secretsmanager.CreateSecretInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteResourcePolicy provides a mock function with given fields: _a0
func (_m *SecretsManagerAPI) DeleteResourcePolicy(_a0 *secretsmanager.DeleteResourcePolicyInput) (*secretsmanager.DeleteResourcePolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *secretsmanager.DeleteResourcePolicyOutput
	if rf, ok := ret.Get(0).(func(*secretsmanager.DeleteResourcePolicyInput) *secretsmanager.DeleteResourcePolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secretsmanager.DeleteResourcePolicyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*secretsmanager.DeleteResourcePolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteResourcePolicyRequest provides a mock function with given fields: _a0
func (_m *SecretsManagerAPI) DeleteResourcePolicyRequest(_a0 *secretsmanager.DeleteResourcePolicyInput) (*request.Request, *secretsmanager.DeleteResourcePolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*secretsmanager.DeleteResourcePolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *secretsmanager.DeleteResourcePolicyOutput
	if rf, ok := ret.Get(1).(func(*secretsmanager.DeleteResourcePolicyInput) *secretsmanager.DeleteResourcePolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*secretsmanager.DeleteResourcePolicyOutput)
		}
	}

	return r0, r1
}

// DeleteResourcePolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SecretsManagerAPI) DeleteResourcePolicyWithContext(_a0 context.Context, _a1 *secretsmanager.DeleteResourcePolicyInput, _a2 ...request.Option) (*secretsmanager.DeleteResourcePolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *secretsmanager.DeleteResourcePolicyOutput
	if rf, ok := ret.Get(0).(func(context.Context, *secretsmanager.DeleteResourcePolicyInput, ...request.Option) *secretsmanager.DeleteResourcePolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secretsmanager.DeleteResourcePolicyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *secretsmanager.DeleteResourcePolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSecret provides a mock function with given fields: _a0
func (_m *SecretsManagerAPI) DeleteSecret(_a0 *secretsmanager.DeleteSecretInput) (*secretsmanager.DeleteSecretOutput, error) {
	ret := _m.Called(_a0)

	var r0 *secretsmanager.DeleteSecretOutput
	if rf, ok := ret.Get(0).(func(*secretsmanager.DeleteSecretInput) *secretsmanager.DeleteSecretOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secretsmanager.DeleteSecretOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*secretsmanager.DeleteSecretInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSecretRequest provides a mock function with given fields: _a0
func (_m *SecretsManagerAPI) DeleteSecretRequest(_a0 *secretsmanager.DeleteSecretInput) (*request.Request, *secretsmanager.DeleteSecretOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*secretsmanager.DeleteSecretInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *secretsmanager.DeleteSecretOutput
	if rf, ok := ret.Get(1).(func(*secretsmanager.DeleteSecretInput) *secretsmanager.DeleteSecretOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*secretsmanager.DeleteSecretOutput)
		}
	}

	return r0, r1
}

// DeleteSecretWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SecretsManagerAPI) DeleteSecretWithContext(_a0 context.Context, _a1 *secretsmanager.DeleteSecretInput, _a2 ...request.Option) (*secretsmanager.DeleteSecretOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *secretsmanager.DeleteSecretOutput
	if rf, ok := ret.Get(0).(func(context.Context, *secretsmanager.DeleteSecretInput, ...request.Option) *secretsmanager.DeleteSecretOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secretsmanager.DeleteSecretOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *secretsmanager.DeleteSecretInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeSecret provides a mock function with given fields: _a0
func (_m *SecretsManagerAPI) DescribeSecret(_a0 *secretsmanager.DescribeSecretInput) (*secretsmanager.DescribeSecretOutput, error) {
	ret := _m.Called(_a0)

	var r0 *secretsmanager.DescribeSecretOutput
	if rf, ok := ret.Get(0).(func(*secretsmanager.DescribeSecretInput) *secretsmanager.DescribeSecretOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secretsmanager.DescribeSecretOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*secretsmanager.DescribeSecretInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeSecretRequest provides a mock function with given fields: _a0
func (_m *SecretsManagerAPI) DescribeSecretRequest(_a0 *secretsmanager.DescribeSecretInput) (*request.Request, *secretsmanager.DescribeSecretOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*secretsmanager.DescribeSecretInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *secretsmanager.DescribeSecretOutput
	if rf, ok := ret.Get(1).(func(*secretsmanager.DescribeSecretInput) *secretsmanager.DescribeSecretOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*secretsmanager.DescribeSecretOutput)
		}
	}

	return r0, r1
}

// DescribeSecretWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SecretsManagerAPI) DescribeSecretWithContext(_a0 context.Context, _a1 *secretsmanager.DescribeSecretInput, _a2 ...request.Option) (*secretsmanager.DescribeSecretOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *secretsmanager.DescribeSecretOutput
	if rf, ok := ret.Get(0).(func(context.Context, *secretsmanager.DescribeSecretInput, ...request.Option) *secretsmanager.DescribeSecretOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secretsmanager.DescribeSecretOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *secretsmanager.DescribeSecretInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRandomPassword provides a mock function with given fields: _a0
func (_m *SecretsManagerAPI) GetRandomPassword(_a0 *secretsmanager.GetRandomPasswordInput) (*secretsmanager.GetRandomPasswordOutput, error) {
	ret := _m.Called(_a0)

	var r0 *secretsmanager.GetRandomPasswordOutput
	if rf, ok := ret.Get(0).(func(*secretsmanager.GetRandomPasswordInput) *secretsmanager.GetRandomPasswordOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secretsmanager.GetRandomPasswordOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*secretsmanager.GetRandomPasswordInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRandomPasswordRequest provides a mock function with given fields: _a0
func (_m *SecretsManagerAPI) GetRandomPasswordRequest(_a0 *secretsmanager.GetRandomPasswordInput) (*request.Request, *secretsmanager.GetRandomPasswordOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*secretsmanager.GetRandomPasswordInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *secretsmanager.GetRandomPasswordOutput
	if rf, ok := ret.Get(1).(func(*secretsmanager.GetRandomPasswordInput) *secretsmanager.GetRandomPasswordOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*secretsmanager.GetRandomPasswordOutput)
		}
	}

	return r0, r1
}

// GetRandomPasswordWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SecretsManagerAPI) GetRandomPasswordWithContext(_a0 context.Context, _a1 *secretsmanager.GetRandomPasswordInput, _a2 ...request.Option) (*secretsmanager.GetRandomPasswordOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *secretsmanager.GetRandomPasswordOutput
	if rf, ok := ret.Get(0).(func(context.Context, *secretsmanager.GetRandomPasswordInput, ...request.Option) *secretsmanager.GetRandomPasswordOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secretsmanager.GetRandomPasswordOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *secretsmanager.GetRandomPasswordInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResourcePolicy provides a mock function with given fields: _a0
func (_m *SecretsManagerAPI) GetResourcePolicy(_a0 *secretsmanager.GetResourcePolicyInput) (*secretsmanager.GetResourcePolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *secretsmanager.GetResourcePolicyOutput
	if rf, ok := ret.Get(0).(func(*secretsmanager.GetResourcePolicyInput) *secretsmanager.GetResourcePolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secretsmanager.GetResourcePolicyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*secretsmanager.GetResourcePolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResourcePolicyRequest provides a mock function with given fields: _a0
func (_m *SecretsManagerAPI) GetResourcePolicyRequest(_a0 *secretsmanager.GetResourcePolicyInput) (*request.Request, *secretsmanager.GetResourcePolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*secretsmanager.GetResourcePolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *secretsmanager.GetResourcePolicyOutput
	if rf, ok := ret.Get(1).(func(*secretsmanager.GetResourcePolicyInput) *secretsmanager.GetResourcePolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*secretsmanager.GetResourcePolicyOutput)
		}
	}

	return r0, r1
}

// GetResourcePolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SecretsManagerAPI) GetResourcePolicyWithContext(_a0 context.Context, _a1 *secretsmanager.GetResourcePolicyInput, _a2 ...request.Option) (*secretsmanager.GetResourcePolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *secretsmanager.GetResourcePolicyOutput
	if rf, ok := ret.Get(0).(func(context.Context, *secretsmanager.GetResourcePolicyInput, ...request.Option) *secretsmanager.GetResourcePolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secretsmanager.GetResourcePolicyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *secretsmanager.GetResourcePolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSecretValue provides a mock function with given fields: _a0
func (_m *SecretsManagerAPI) GetSecretValue(_a0 *secretsmanager.GetSecretValueInput) (*secretsmanager.GetSecretValueOutput, error) {
	ret := _m.Called(_a0)

	var r0 *secretsmanager.GetSecretValueOutput
	if rf, ok := ret.Get(0).(func(*secretsmanager.GetSecretValueInput) *secretsmanager.GetSecretValueOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secretsmanager.GetSecretValueOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*secretsmanager.GetSecretValueInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSecretValueRequest provides a mock function with given fields: _a0
func (_m *SecretsManagerAPI) GetSecretValueRequest(_a0 *secretsmanager.GetSecretValueInput) (*request.Request, *secretsmanager.GetSecretValueOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*secretsmanager.GetSecretValueInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *secretsmanager.GetSecretValueOutput
	if rf, ok := ret.Get(1).(func(*secretsmanager.GetSecretValueInput) *secretsmanager.GetSecretValueOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*secretsmanager.GetSecretValueOutput)
		}
	}

	return r0, r1
}

// GetSecretValueWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SecretsManagerAPI) GetSecretValueWithContext(_a0 context.Context, _a1 *secretsmanager.GetSecretValueInput, _a2 ...request.Option) (*secretsmanager.GetSecretValueOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *secretsmanager.GetSecretValueOutput
	if rf, ok := ret.Get(0).(func(context.Context, *secretsmanager.GetSecretValueInput, ...request.Option) *secretsmanager.GetSecretValueOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secretsmanager.GetSecretValueOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *secretsmanager.GetSecretValueInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSecretVersionIds provides a mock function with given fields: _a0
func (_m *SecretsManagerAPI) ListSecretVersionIds(_a0 *secretsmanager.ListSecretVersionIdsInput) (*secretsmanager.ListSecretVersionIdsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *secretsmanager.ListSecretVersionIdsOutput
	if rf, ok := ret.Get(0).(func(*secretsmanager.ListSecretVersionIdsInput) *secretsmanager.ListSecretVersionIdsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secretsmanager.ListSecretVersionIdsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*secretsmanager.ListSecretVersionIdsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSecretVersionIdsPages provides a mock function with given fields: _a0, _a1
func (_m *SecretsManagerAPI) ListSecretVersionIdsPages(_a0 *secretsmanager.ListSecretVersionIdsInput, _a1 func(*secretsmanager.ListSecretVersionIdsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*secretsmanager.ListSecretVersionIdsInput, func(*secretsmanager.ListSecretVersionIdsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListSecretVersionIdsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *SecretsManagerAPI) ListSecretVersionIdsPagesWithContext(_a0 context.Context, _a1 *secretsmanager.ListSecretVersionIdsInput, _a2 func(*secretsmanager.ListSecretVersionIdsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *secretsmanager.ListSecretVersionIdsInput, func(*secretsmanager.ListSecretVersionIdsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListSecretVersionIdsRequest provides a mock function with given fields: _a0
func (_m *SecretsManagerAPI) ListSecretVersionIdsRequest(_a0 *secretsmanager.ListSecretVersionIdsInput) (*request.Request, *secretsmanager.ListSecretVersionIdsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*secretsmanager.ListSecretVersionIdsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *secretsmanager.ListSecretVersionIdsOutput
	if rf, ok := ret.Get(1).(func(*secretsmanager.ListSecretVersionIdsInput) *secretsmanager.ListSecretVersionIdsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*secretsmanager.ListSecretVersionIdsOutput)
		}
	}

	return r0, r1
}

// ListSecretVersionIdsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SecretsManagerAPI) ListSecretVersionIdsWithContext(_a0 context.Context, _a1 *secretsmanager.ListSecretVersionIdsInput, _a2 ...request.Option) (*secretsmanager.ListSecretVersionIdsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *secretsmanager.ListSecretVersionIdsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *secretsmanager.ListSecretVersionIdsInput, ...request.Option) *secretsmanager.ListSecretVersionIdsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secretsmanager.ListSecretVersionIdsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *secretsmanager.ListSecretVersionIdsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSecrets provides a mock function with given fields: _a0
func (_m *SecretsManagerAPI) ListSecrets(_a0 *secretsmanager.ListSecretsInput) (*secretsmanager.ListSecretsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *secretsmanager.ListSecretsOutput
	if rf, ok := ret.Get(0).(func(*secretsmanager.ListSecretsInput) *secretsmanager.ListSecretsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secretsmanager.ListSecretsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*secretsmanager.ListSecretsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSecretsPages provides a mock function with given fields: _a0, _a1
func (_m *SecretsManagerAPI) ListSecretsPages(_a0 *secretsmanager.ListSecretsInput, _a1 func(*secretsmanager.ListSecretsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*secretsmanager.ListSecretsInput, func(*secretsmanager.ListSecretsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListSecretsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *SecretsManagerAPI) ListSecretsPagesWithContext(_a0 context.Context, _a1 *secretsmanager.ListSecretsInput, _a2 func(*secretsmanager.ListSecretsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *secretsmanager.ListSecretsInput, func(*secretsmanager.ListSecretsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListSecretsRequest provides a mock function with given fields: _a0
func (_m *SecretsManagerAPI) ListSecretsRequest(_a0 *secretsmanager.ListSecretsInput) (*request.Request, *secretsmanager.ListSecretsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*secretsmanager.ListSecretsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *secretsmanager.ListSecretsOutput
	if rf, ok := ret.Get(1).(func(*secretsmanager.ListSecretsInput) *secretsmanager.ListSecretsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*secretsmanager.ListSecretsOutput)
		}
	}

	return r0, r1
}

// ListSecretsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SecretsManagerAPI) ListSecretsWithContext(_a0 context.Context, _a1 *secretsmanager.ListSecretsInput, _a2 ...request.Option) (*secretsmanager.ListSecretsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *secretsmanager.ListSecretsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *secretsmanager.ListSecretsInput, ...request.Option) *secretsmanager.ListSecretsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secretsmanager.ListSecretsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *secretsmanager.ListSecretsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutResourcePolicy provides a mock function with given fields: _a0
func (_m *SecretsManagerAPI) PutResourcePolicy(_a0 *secretsmanager.PutResourcePolicyInput) (*secretsmanager.PutResourcePolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *secretsmanager.PutResourcePolicyOutput
	if rf, ok := ret.Get(0).(func(*secretsmanager.PutResourcePolicyInput) *secretsmanager.PutResourcePolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secretsmanager.PutResourcePolicyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*secretsmanager.PutResourcePolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutResourcePolicyRequest provides a mock function with given fields: _a0
func (_m *SecretsManagerAPI) PutResourcePolicyRequest(_a0 *secretsmanager.PutResourcePolicyInput) (*request.Request, *secretsmanager.PutResourcePolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*secretsmanager.PutResourcePolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *secretsmanager.PutResourcePolicyOutput
	if rf, ok := ret.Get(1).(func(*secretsmanager.PutResourcePolicyInput) *secretsmanager.PutResourcePolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*secretsmanager.PutResourcePolicyOutput)
		}
	}

	return r0, r1
}

// PutResourcePolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SecretsManagerAPI) PutResourcePolicyWithContext(_a0 context.Context, _a1 *secretsmanager.PutResourcePolicyInput, _a2 ...request.Option) (*secretsmanager.PutResourcePolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *secretsmanager.PutResourcePolicyOutput
	if rf, ok := ret.Get(0).(func(context.Context, *secretsmanager.PutResourcePolicyInput, ...request.Option) *secretsmanager.PutResourcePolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secretsmanager.PutResourcePolicyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *secretsmanager.PutResourcePolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutSecretValue provides a mock function with given fields: _a0
func (_m *SecretsManagerAPI) PutSecretValue(_a0 *secretsmanager.PutSecretValueInput) (*secretsmanager.PutSecretValueOutput, error) {
	ret := _m.Called(_a0)

	var r0 *secretsmanager.PutSecretValueOutput
	if rf, ok := ret.Get(0).(func(*secretsmanager.PutSecretValueInput) *secretsmanager.PutSecretValueOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secretsmanager.PutSecretValueOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*secretsmanager.PutSecretValueInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutSecretValueRequest provides a mock function with given fields: _a0
func (_m *SecretsManagerAPI) PutSecretValueRequest(_a0 *secretsmanager.PutSecretValueInput) (*request.Request, *secretsmanager.PutSecretValueOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*secretsmanager.PutSecretValueInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *secretsmanager.PutSecretValueOutput
	if rf, ok := ret.Get(1).(func(*secretsmanager.PutSecretValueInput) *secretsmanager.PutSecretValueOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*secretsmanager.PutSecretValueOutput)
		}
	}

	return r0, r1
}

// PutSecretValueWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SecretsManagerAPI) PutSecretValueWithContext(_a0 context.Context, _a1 *secretsmanager.PutSecretValueInput, _a2 ...request.Option) (*secretsmanager.PutSecretValueOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *secretsmanager.PutSecretValueOutput
	if rf, ok := ret.Get(0).(func(context.Context, *secretsmanager.PutSecretValueInput, ...request.Option) *secretsmanager.PutSecretValueOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secretsmanager.PutSecretValueOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *secretsmanager.PutSecretValueInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RestoreSecret provides a mock function with given fields: _a0
func (_m *SecretsManagerAPI) RestoreSecret(_a0 *secretsmanager.RestoreSecretInput) (*secretsmanager.RestoreSecretOutput, error) {
	ret := _m.Called(_a0)

	var r0 *secretsmanager.RestoreSecretOutput
	if rf, ok := ret.Get(0).(func(*secretsmanager.RestoreSecretInput) *secretsmanager.RestoreSecretOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secretsmanager.RestoreSecretOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*secretsmanager.RestoreSecretInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RestoreSecretRequest provides a mock function with given fields: _a0
func (_m *SecretsManagerAPI) RestoreSecretRequest(_a0 *secretsmanager.RestoreSecretInput) (*request.Request, *secretsmanager.RestoreSecretOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*secretsmanager.RestoreSecretInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *secretsmanager.RestoreSecretOutput
	if rf, ok := ret.Get(1).(func(*secretsmanager.RestoreSecretInput) *secretsmanager.RestoreSecretOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*secretsmanager.RestoreSecretOutput)
		}
	}

	return r0, r1
}

// RestoreSecretWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SecretsManagerAPI) RestoreSecretWithContext(_a0 context.Context, _a1 *secretsmanager.RestoreSecretInput, _a2 ...request.Option) (*secretsmanager.RestoreSecretOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *secretsmanager.RestoreSecretOutput
	if rf, ok := ret.Get(0).(func(context.Context, *secretsmanager.RestoreSecretInput, ...request.Option) *secretsmanager.RestoreSecretOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secretsmanager.RestoreSecretOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *secretsmanager.RestoreSecretInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RotateSecret provides a mock function with given fields: _a0
func (_m *SecretsManagerAPI) RotateSecret(_a0 *secretsmanager.RotateSecretInput) (*secretsmanager.RotateSecretOutput, error) {
	ret := _m.Called(_a0)

	var r0 *secretsmanager.RotateSecretOutput
	if rf, ok := ret.Get(0).(func(*secretsmanager.RotateSecretInput) *secretsmanager.RotateSecretOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secretsmanager.RotateSecretOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*secretsmanager.RotateSecretInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RotateSecretRequest provides a mock function with given fields: _a0
func (_m *SecretsManagerAPI) RotateSecretRequest(_a0 *secretsmanager.RotateSecretInput) (*request.Request, *secretsmanager.RotateSecretOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*secretsmanager.RotateSecretInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *secretsmanager.RotateSecretOutput
	if rf, ok := ret.Get(1).(func(*secretsmanager.RotateSecretInput) *secretsmanager.RotateSecretOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*secretsmanager.RotateSecretOutput)
		}
	}

	return r0, r1
}

// RotateSecretWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SecretsManagerAPI) RotateSecretWithContext(_a0 context.Context, _a1 *secretsmanager.RotateSecretInput, _a2 ...request.Option) (*secretsmanager.RotateSecretOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *secretsmanager.RotateSecretOutput
	if rf, ok := ret.Get(0).(func(context.Context, *secretsmanager.RotateSecretInput, ...request.Option) *secretsmanager.RotateSecretOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secretsmanager.RotateSecretOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *secretsmanager.RotateSecretInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: _a0
func (_m *SecretsManagerAPI) TagResource(_a0 *secretsmanager.TagResourceInput) (*secretsmanager.TagResourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *secretsmanager.TagResourceOutput
	if rf, ok := ret.Get(0).(func(*secretsmanager.TagResourceInput) *secretsmanager.TagResourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secretsmanager.TagResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*secretsmanager.TagResourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResourceRequest provides a mock function with given fields: _a0
func (_m *SecretsManagerAPI) TagResourceRequest(_a0 *secretsmanager.TagResourceInput) (*request.Request, *secretsmanager.TagResourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*secretsmanager.TagResourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *secretsmanager.TagResourceOutput
	if rf, ok := ret.Get(1).(func(*secretsmanager.TagResourceInput) *secretsmanager.TagResourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*secretsmanager.TagResourceOutput)
		}
	}

	return r0, r1
}

// TagResourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SecretsManagerAPI) TagResourceWithContext(_a0 context.Context, _a1 *secretsmanager.TagResourceInput, _a2 ...request.Option) (*secretsmanager.TagResourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *secretsmanager.TagResourceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *secretsmanager.TagResourceInput, ...request.Option) *secretsmanager.TagResourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secretsmanager.TagResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *secretsmanager.TagResourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: _a0
func (_m *SecretsManagerAPI) UntagResource(_a0 *secretsmanager.UntagResourceInput) (*secretsmanager.UntagResourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *secretsmanager.UntagResourceOutput
	if rf, ok := ret.Get(0).(func(*secretsmanager.UntagResourceInput) *secretsmanager.UntagResourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secretsmanager.UntagResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*secretsmanager.UntagResourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResourceRequest provides a mock function with given fields: _a0
func (_m *SecretsManagerAPI) UntagResourceRequest(_a0 *secretsmanager.UntagResourceInput) (*request.Request, *secretsmanager.UntagResourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*secretsmanager.UntagResourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *secretsmanager.UntagResourceOutput
	if rf, ok := ret.Get(1).(func(*secretsmanager.UntagResourceInput) *secretsmanager.UntagResourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*secretsmanager.UntagResourceOutput)
		}
	}

	return r0, r1
}

// UntagResourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SecretsManagerAPI) UntagResourceWithContext(_a0 context.Context, _a1 *secretsmanager.UntagResourceInput, _a2 ...request.Option) (*secretsmanager.UntagResourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *secretsmanager.UntagResourceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *secretsmanager.UntagResourceInput, ...request.Option) *secretsmanager.UntagResourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secretsmanager.UntagResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *secretsmanager.UntagResourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSecret provides a mock function with given fields: _a0
func (_m *SecretsManagerAPI) UpdateSecret(_a0 *secretsmanager.UpdateSecretInput) (*secretsmanager.UpdateSecretOutput, error) {
	ret := _m.Called(_a0)

	var r0 *secretsmanager.UpdateSecretOutput
	if rf, ok := ret.Get(0).(func(*secretsmanager.UpdateSecretInput) *secretsmanager.UpdateSecretOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secretsmanager.UpdateSecretOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*secretsmanager.UpdateSecretInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSecretRequest provides a mock function with given fields: _a0
func (_m *SecretsManagerAPI) UpdateSecretRequest(_a0 *secretsmanager.UpdateSecretInput) (*request.Request, *secretsmanager.UpdateSecretOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*secretsmanager.UpdateSecretInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *secretsmanager.UpdateSecretOutput
	if rf, ok := ret.Get(1).(func(*secretsmanager.UpdateSecretInput) *secretsmanager.UpdateSecretOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*secretsmanager.UpdateSecretOutput)
		}
	}

	return r0, r1
}

// UpdateSecretVersionStage provides a mock function with given fields: _a0
func (_m *SecretsManagerAPI) UpdateSecretVersionStage(_a0 *secretsmanager.UpdateSecretVersionStageInput) (*secretsmanager.UpdateSecretVersionStageOutput, error) {
	ret := _m.Called(_a0)

	var r0 *secretsmanager.UpdateSecretVersionStageOutput
	if rf, ok := ret.Get(0).(func(*secretsmanager.UpdateSecretVersionStageInput) *secretsmanager.UpdateSecretVersionStageOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secretsmanager.UpdateSecretVersionStageOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*secretsmanager.UpdateSecretVersionStageInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSecretVersionStageRequest provides a mock function with given fields: _a0
func (_m *SecretsManagerAPI) UpdateSecretVersionStageRequest(_a0 *secretsmanager.UpdateSecretVersionStageInput) (*request.Request, *secretsmanager.UpdateSecretVersionStageOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*secretsmanager.UpdateSecretVersionStageInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *secretsmanager.UpdateSecretVersionStageOutput
	if rf, ok := ret.Get(1).(func(*secretsmanager.UpdateSecretVersionStageInput) *secretsmanager.UpdateSecretVersionStageOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*secretsmanager.UpdateSecretVersionStageOutput)
		}
	}

	return r0, r1
}

// UpdateSecretVersionStageWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SecretsManagerAPI) UpdateSecretVersionStageWithContext(_a0 context.Context, _a1 *secretsmanager.UpdateSecretVersionStageInput, _a2 ...request.Option) (*secretsmanager.UpdateSecretVersionStageOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *secretsmanager.UpdateSecretVersionStageOutput
	if rf, ok := ret.Get(0).(func(context.Context, *secretsmanager.UpdateSecretVersionStageInput, ...request.Option) *secretsmanager.UpdateSecretVersionStageOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secretsmanager.UpdateSecretVersionStageOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *secretsmanager.UpdateSecretVersionStageInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSecretWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SecretsManagerAPI) UpdateSecretWithContext(_a0 context.Context, _a1 *secretsmanager.UpdateSecretInput, _a2 ...request.Option) (*secretsmanager.UpdateSecretOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *secretsmanager.UpdateSecretOutput
	if rf, ok := ret.Get(0).(func(context.Context, *secretsmanager.UpdateSecretInput, ...request.Option) *secretsmanager.UpdateSecretOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secretsmanager.UpdateSecretOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *secretsmanager.UpdateSecretInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
